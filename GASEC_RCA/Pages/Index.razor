@page "/Index"
@using GASEC_RCA.Data;
@using System.IO;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnvironment
@inject Microsoft.JSInterop.IJSRuntime JS

@* @using MatBlazor;
@page "/" *@
@* <h2>PDF Library</h2>
<p>Click the button to view a PDF document generated by Blazor PDF library< /p>
@* <button class="btn btn-primary" @onclick="@CreatePDF">Create PDF</button> *@



<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>


        <MudItem xs="12" sm="6" md="4">
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
                <CustomGraphics>
                    <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                    <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
                </CustomGraphics>
            </MudChart>
        </MudItem>


        <MudItem xs="12" sm="6" md="4">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
                <CustomGraphics>
                    <style>
                        .heavy {
                            font: bold 30px Helvetica;
                        }

                        .Rrrrr {
                            font: italic 40px Helvetica;
                            fill: rgb(62,44,221);
                        }
                    </style>
                    @* <text x="80" y="35" class="heavy">I Love</text> *@
                    @* <text x="105" y="70" class="Rrrrr">Naissance</text> *@
                </CustomGraphics>
            </MudChart>
        </MudItem>




        <MudItem xs="12" sm="12" md="4">
            <div>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels2" Width="100%" Height="350" ChartOptions="options"></MudChart>
                <MudButton @onclick="RandomizeData">Randomize Data</MudButton>
                <MudMenu Label="Interpolation Algorithm" FullWidth="true">
                    <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Straight)">Straight</MudMenuItem>
                    <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
                    <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.EndSlope)">End Slope</MudMenuItem>
                    <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Periodic)">Periodic</MudMenuItem>
                </MudMenu>
            </div>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">

                    <div>
                        <MudChart ChartType="ChartType.Bar" ChartSeries="@Series3" @bind-SelectedIndex="Indice3" XAxisLabels="@XAxisLabels3" Width="100%" Height="350px"></MudChart>
                    </div>
                    <MudText Typo="Typo.h6">Selected portion of the chart: @Indice3</MudText>

                </MudItem>
                <MudItem xs="12">

                    <MudPaper Class="pa-4">
                        <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index4" InputLabels="@labels4" Width="300px" Height="300px" />
                    </MudPaper>
                    <MudPaper Class="pa-4 mt-2 d-flex justify-center">
                        <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                        <MudButton @onclick="RandomizeData4" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
                        <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>
                    </MudPaper>
                    <MudText Typo="Typo.h6">Selected portion of the chart: @Index4</MudText>

                </MudItem>
            </MudGrid>
        </MudItem>




        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4">
                <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index4" InputLabels="@labels4" Width="300px" Height="300px" />
                </MudPaper>
                <MudPaper Class="pa-4 mt-2 d-flex justify-center">
                <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                <MudButton @onclick="RandomizeData4" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
                <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>
                </MudPaper>
            <MudText Typo="Typo.h6">Selected portion of the chart: @Index4</MudText>
        </MudItem>
        
        

<MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
    

    </MudGrid>
</MudContainer>



@code{

    public double[] data = { 25, 77, 28, 5 };
    public string[] labels = { "Oil", "Coal", "Gas", "Biomass" };

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Plateaux", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = "Equateur", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = "Bas-Oubangui", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { "Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" };


    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series2 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 35, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels2 = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    Random random = new Random();
    protected override void OnInitialized()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = "c2";
    }

    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Series 1", Data = new double[9] },
            new ChartSeries() { Name = "Series 2", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series2 = new_series;
        StateHasChanged();
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }


    private int Indice3 = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series3 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels3 = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };



    private int Index4 = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    double[] data4 = { 77, 25, 20, 5 };
    string[] labels4 = { "Uranium", "Plutonium", "Thorium", "Caesium", "Technetium", "Promethium",
                        "Polonium", "Astatine", "Radon", "Francium", "Radium", "Actinium", "Protactinium",
                        "Neptunium", "Americium", "Curium", "Berkelium", "Californium", "Einsteinium", "Mudblaznium" };

    Random random4 = new Random();

    void RandomizeData4()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 100;
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData4();
        }
    }
    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData4();
        }
    }


    protected async void CreatePDF()
    {

        int codePersonne = 20240001;

        ExportService service = new ExportService(hostingEnvironment);
        MemoryStream documentation = service.CreatePDF(codePersonne);
        await JS.InvokeAsync<object>(
            "saveAsFile",
            "Invoice.pdf",
            Convert.ToBase64String(documentation.ToArray()));
    }

}

@* @using GASEC_RCA.Data
@inject SessionState sessionsState
@inject NavigationManager navigationManager

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@code{
    protected override async Task OnInitializedAsync()
    {
        if(sessionsState.sessionEtat == 0)
        {
            navigationManager.NavigateTo("/");
        }

        // sessionsState.sessionId = 0;
        // sessionsState.sessionNom = null;
    }
} *@